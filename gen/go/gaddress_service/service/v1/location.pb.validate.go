// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gaddress_service/service/v1/location.proto

package proto_location_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LocationListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocationListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocationListRequestMultiError, or nil if none found.
func (m *LocationListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Query.(type) {

	case *LocationListRequest_Coordinate:

		if all {
			switch v := interface{}(m.GetCoordinate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationListRequestValidationError{
						field:  "Coordinate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationListRequestValidationError{
						field:  "Coordinate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCoordinate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationListRequestValidationError{
					field:  "Coordinate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LocationListRequest_Text:

		if utf8.RuneCountInString(m.GetText()) < 1 {
			err := LocationListRequestValidationError{
				field:  "Text",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		err := LocationListRequestValidationError{
			field:  "Query",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return LocationListRequestMultiError(errors)
	}

	return nil
}

// LocationListRequestMultiError is an error wrapping multiple validation
// errors returned by LocationListRequest.ValidateAll() if the designated
// constraints aren't met.
type LocationListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationListRequestMultiError) AllErrors() []error { return m }

// LocationListRequestValidationError is the validation error returned by
// LocationListRequest.Validate if the designated constraints aren't met.
type LocationListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationListRequestValidationError) ErrorName() string {
	return "LocationListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LocationListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationListRequestValidationError{}

// Validate checks the field values on Coordinate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coordinate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coordinate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoordinateMultiError, or
// nil if none found.
func (m *Coordinate) ValidateAll() error {
	return m.validate(true)
}

func (m *Coordinate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLatitude(); val < -90 || val > 90 {
		err := CoordinateValidationError{
			field:  "Latitude",
			reason: "value must be inside range [-90, 90]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLongitude(); val < -180 || val > 180 {
		err := CoordinateValidationError{
			field:  "Longitude",
			reason: "value must be inside range [-180, 180]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CoordinateMultiError(errors)
	}

	return nil
}

// CoordinateMultiError is an error wrapping multiple validation errors
// returned by Coordinate.ValidateAll() if the designated constraints aren't met.
type CoordinateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoordinateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoordinateMultiError) AllErrors() []error { return m }

// CoordinateValidationError is the validation error returned by
// Coordinate.Validate if the designated constraints aren't met.
type CoordinateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoordinateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoordinateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoordinateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoordinateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoordinateValidationError) ErrorName() string { return "CoordinateValidationError" }

// Error satisfies the builtin error interface
func (e CoordinateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoordinate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoordinateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoordinateValidationError{}

// Validate checks the field values on LocationListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocationListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocationListResponseMultiError, or nil if none found.
func (m *LocationListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocationListResponseValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocationListResponseValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocationListResponseValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LocationListResponseMultiError(errors)
	}

	return nil
}

// LocationListResponseMultiError is an error wrapping multiple validation
// errors returned by LocationListResponse.ValidateAll() if the designated
// constraints aren't met.
type LocationListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationListResponseMultiError) AllErrors() []error { return m }

// LocationListResponseValidationError is the validation error returned by
// LocationListResponse.Validate if the designated constraints aren't met.
type LocationListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationListResponseValidationError) ErrorName() string {
	return "LocationListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LocationListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationListResponseValidationError{}
